#!/usr/bin/env python2
from epfl.moodle import Moodle, Ressource, ConnexionIssue
import os
import sys
import codecs
import json

CONF_FILE = ".moodle"

SELECT_ALL = 'a'
def init_moodle_directory(moodle):
    print("Downloading a list of courses")
    courses = list(moodle.get_courses())
    print("Select the courses you want to download separated \
            by a comma, '{}' for all.").format(SELECT_ALL)
    for index, course in enumerate(courses):
        print(u"\t{})) {}".format(index, course.name))
    valid = False
    while not valid:
        input = raw_input(">>")
        if input == SELECT_ALL:
            selection = courses
            valid = True
            print("All the course are selected")
        else:
            try:
                selection = [courses[int(i)] for i in input.split(',')]
                valid = True
            except (ValueError, IndexError):
                print("Invalid value, please retry")
    return selection

def course_download(moodle, url, directory=""):
   course = Ressource("Course", url)
   documents = moodle.get_documents(course)
   if directory and not os.path.exists(directory):
       os.mkdir(directory)
   for index, documents in enumerate(documents):
       dir_name = os.path.join(directory, str(index))
       if not os.path.exists(dir_name):
           os.mkdir(dir_name)
       for document in documents:
           moodle.fetch_document(document, dir_name)
def usage():
    print("Read The README")
    exit(1)

print('''
                          #  ""#          
 mmmmm   mmm    mmm    mmm#    #     mmm  
 # # #  #" "#  #" "#  #" "#    #    #"  # 
 # # #  #   #  #   #  #   #    #    #"""" 
 # # #  "#m#"  "#m#"  "#m##    "mm  "#mm" 

''')
#this overwrite the default codec used for stdout
streamWriter = codecs.lookup('utf-8')[-1]
sys.stdout = streamWriter(sys.stdout)
sys.stdout.encoding = 'utf-8'

if len(sys.argv) < 2 or len(sys.argv) > 3:
    usage()

print("Moodle handshake")
if len(sys.argv) == 2:
    import getpass
    passwd = getpass.getpass()
    if not passwd:
        print("You didn't provide any password")
        exit(2)
    sys.argv.append(passwd)
try:
    moodle = Moodle(sys.argv[1], sys.argv[2])
except (ConnexionIssue) as e:
    print(u"Issue with authentication {}".format(str(e).strip()))
    exit(2)

if len(sys.argv) == 3:
    if not os.path.exists(CONF_FILE):
        selection = init_moodle_directory(moodle)
        with open(CONF_FILE, "w") as f:
            #serialiaze every course
            dict_selection = [vars(s) for s in selection]
            json.dump(dict_selection, f)
    else:
        with open(CONF_FILE) as f:
            #deserialize
            dict_selection = json.load(f)
            #TODO this can be better rewritten
            selection = [Ressource(dic['name'], dic['link']) for dic in dict_selection] 
    for course in selection:
        print(u"Fetching course {}.".format(course.name))
        course_download(moodle, course.link, course.name)
elif len(sys.argv) == 4:
    course_download(moodle, sys.argv[3])
