#!/usr/bin/env python2
from epfl_moodle.moodle import Moodle, Ressource, ConnexionIssue
import os
import sys
import json
import getpass
import argparse
import re
import logging

if sys.version_info[0] == 3:
    raw_input = input

CONF_FILE = ".moodle"

SELECT_ALL_KEY = 'a'

COURSE_RE = re.compile("https?://moodle\.epfl\.ch/course/view.php\?id=\d+")

def init_moodle_directory(moodle):
    """This method will create a .moodle file. This contains the list of all the courses
    to be downloaded
    """
    print("Downloading a list of courses")
    courses = list(moodle.get_courses())
    print("Select the courses you want to download separated"
          "by a comma, '{}' to select all courses.".format(SELECT_ALL_KEY))
    for index, course in enumerate(courses):
        print(u"\t{})) {}".format(index, course.name))
    valid = False
    while not valid:
        input = raw_input(">>")
        if input == SELECT_ALL_KEY:
            selection = courses
            valid = True
            print("All the course are selected")
        else:
            try:
                selection = [courses[int(i)] for i in input.split(',')]
                valid = True
            except (ValueError, IndexError):
                print("Invalid value, please retry")
    return selection

def course_download(moodle, url, directory=""):
   course = Ressource("Course", url)
   documents = moodle.get_documents(course)
   if directory and not os.path.exists(directory):
       os.mkdir(directory)
   for index, documents in enumerate(documents):
       if index == 0:
           dir_name = os.path.join(directory, "Globals")
       else:
           dir_name = os.path.join(directory, "Week "+str(index))
       if not os.path.exists(dir_name):
           os.mkdir(dir_name)
       for document in documents:
           moodle.fetch_document(document, dir_name)


def print_banner():
    print('''
                              #  ""#          
     mmmmm   mmm    mmm    mmm#    #     mmm  
     # # #  #" "#  #" "#  #" "#    #    #"  # 
     # # #  #   #  #   #  #   #    #    #"""" 
     # # #  "#m#"  "#m#"  "#m##    "mm  "#mm" 
    ''')

def output_to_utf8():
    #this overwrite the default codec used for stdout
    import codecs
    streamWriter = codecs.lookup('utf-8')[-1]
    sys.stdout = streamWriter(sys.stdout)

def get_parser():
    parser = argparse.ArgumentParser("moodle")
    parser.add_argument("-v", "--verbose", "Enable a more verbose logging.", action='store_true')
    parser.add_argument("--debug", "Enable the most verbose logging possible.", action='store_true')
    parser.add_argument("username", "The username used for the tequila login.",nargs=1)
    parser.add_argument("course", "An optional list of courses to fetch into the current directory", nargs='*')
    return parser

def main():
    print_banner()
    if sys.version_info[0] == 2:
        output_to_utf8()

    argparser = get_parser()
    args = argparser.parse_args()

    passwd = getpass.getpass()
    if not passwd:
        print("You didn't provide any password")
        exit(2)

    logger = logging.getLogger()
    if args.debug:
        logger.setLevel(logging.DEBUG)
    elif args.verbose:
        logger.setLevel(logging.INFO)

    try:
        logging.info("Moodle handshake, please be patient.")
        moodle = Moodle(args.username, passwd)
    except (ConnexionIssue) as e:
        print(u"Issue with authentication {}".format(str(e).strip()))
        exit(2)

    if not args.course:
        if not os.path.exists(CONF_FILE):
            selection = init_moodle_directory(moodle)
            with open(CONF_FILE, "w") as f:
                #serialiaze every course
                dict_selection = [vars(s) for s in selection]
                json.dump(dict_selection, f)
        else:
            with open(CONF_FILE) as f:
                #deserialize
                dict_selection = json.load(f)
                selection = [Ressource(dic['name'], dic['link']) for dic in dict_selection] 
        for course in selection:
            (u"Fetching course {}.".format(course.name))
            course_download(moodle, course.link, course.name)
    else:
        for course in args.course:
            if COURSE_RE.match(course_url):
                print("Downloading the course {} in the current directory."
                        .format(course_url))
                course_download(moodle, course_url)
            else:
                print("The url {} given as parameter doesn't match the expected scheme {}".format(course_url, COURSE_RE.pattern))

if __name__ == '__main__':
    main()
